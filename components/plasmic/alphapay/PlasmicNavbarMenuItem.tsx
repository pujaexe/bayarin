// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4wM4qRuToRKiXKZ116596e
// Component: O9wh_20PSc
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_alphapay.module.css"; // plasmic-import: 4wM4qRuToRKiXKZ116596e/projectcss
import sty from "./PlasmicNavbarMenuItem.module.css"; // plasmic-import: O9wh_20PSc/css

export type PlasmicNavbarMenuItem__VariantMembers = {
  isActive: "isActive";
};

export type PlasmicNavbarMenuItem__VariantsArgs = {
  isActive?: SingleBooleanChoiceArg<"isActive">;
};

type VariantPropType = keyof PlasmicNavbarMenuItem__VariantsArgs;
export const PlasmicNavbarMenuItem__VariantProps = new Array<VariantPropType>(
  "isActive"
);

export type PlasmicNavbarMenuItem__ArgsType = {
  item?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNavbarMenuItem__ArgsType;
export const PlasmicNavbarMenuItem__ArgProps = new Array<ArgPropType>("item");

export type PlasmicNavbarMenuItem__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultNavbarMenuItemProps {
  item?: React.ReactNode;
  isActive?: SingleBooleanChoiceArg<"isActive">;
  className?: string;
}

function PlasmicNavbarMenuItem__RenderFunc(props: {
  variants: PlasmicNavbarMenuItem__VariantsArgs;
  args: PlasmicNavbarMenuItem__ArgsType;
  overrides: PlasmicNavbarMenuItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      component={Link}
      platform={"nextjs"}
    >
      {p.renderPlasmicSlot({
        defaultContents: "Buy",
        value: args.item,
        className: classNames(sty.slotTargetItem, {
          [sty.slotTargetItemisActive]: hasVariant(
            variants,
            "isActive",
            "isActive"
          )
        })
      })}
    </p.PlasmicLink>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarMenuItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarMenuItem__VariantsArgs;
    args?: PlasmicNavbarMenuItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbarMenuItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbarMenuItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavbarMenuItem__ArgProps,
          internalVariantPropNames: PlasmicNavbarMenuItem__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNavbarMenuItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarMenuItem";
  } else {
    func.displayName = `PlasmicNavbarMenuItem.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarMenuItem = Object.assign(
  // Top-level PlasmicNavbarMenuItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicNavbarMenuItem
    internalVariantProps: PlasmicNavbarMenuItem__VariantProps,
    internalArgProps: PlasmicNavbarMenuItem__ArgProps
  }
);

export default PlasmicNavbarMenuItem;
/* prettier-ignore-end */
