// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4wM4qRuToRKiXKZ116596e
// Component: cAIm2FGQ1q
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MnOverlay from "../../MnOverlay"; // plasmic-import: gU_V28Nrd/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_alphapay.module.css"; // plasmic-import: 4wM4qRuToRKiXKZ116596e/projectcss
import sty from "./PlasmicAvatarMenu.module.css"; // plasmic-import: cAIm2FGQ1q/css

import AvatarSvgrepoComsvg2Icon from "./icons/PlasmicIcon__AvatarSvgrepoComsvg2"; // plasmic-import: qjRDLg0xeS/icon

export type PlasmicAvatarMenu__VariantMembers = {
  isOpen: "isOpen";
};

export type PlasmicAvatarMenu__VariantsArgs = {
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
};

type VariantPropType = keyof PlasmicAvatarMenu__VariantsArgs;
export const PlasmicAvatarMenu__VariantProps = new Array<VariantPropType>(
  "isOpen"
);

export type PlasmicAvatarMenu__ArgsType = {
  caption?: React.ReactNode;
  email?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAvatarMenu__ArgsType;
export const PlasmicAvatarMenu__ArgProps = new Array<ArgPropType>(
  "caption",
  "email"
);

export type PlasmicAvatarMenu__OverridesType = {
  root?: p.Flex<"button">;
  mnOverlay?: p.Flex<typeof MnOverlay>;
  svg?: p.Flex<"svg">;
};

export interface DefaultAvatarMenuProps {
  caption?: React.ReactNode;
  email?: React.ReactNode;
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
  className?: string;
}

function PlasmicAvatarMenu__RenderFunc(props: {
  variants: PlasmicAvatarMenu__VariantsArgs;
  args: PlasmicAvatarMenu__ArgsType;
  overrides: PlasmicAvatarMenu__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const [isRootActive, triggerRootActiveProps] = useTrigger("usePressed", {});
  const [isRootFocusWithin, triggerRootFocusWithinProps] = useTrigger(
    "useFocusedWithin",
    {}
  );
  const triggers = {
    active_root: isRootActive,
    focusWithin_root: isRootFocusWithin
  };

  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootisOpen]: hasVariant(variants, "isOpen", "isOpen") }
      )}
      data-plasmic-trigger-props={[
        triggerRootActiveProps,
        triggerRootFocusWithinProps
      ]}
    >
      {(
        triggers.active_root
          ? true
          : triggers.focusWithin_root
          ? true
          : hasVariant(variants, "isOpen", "isOpen")
          ? true
          : true
      ) ? (
        <MnOverlay
          data-plasmic-name={"mnOverlay"}
          data-plasmic-override={overrides.mnOverlay}
          caption={p.renderPlasmicSlot({
            defaultContents: "Menu 1",
            value: args.caption
          })}
          className={classNames("__wab_instance", sty.mnOverlay, {
            [sty.mnOverlayisOpen]: hasVariant(variants, "isOpen", "isOpen")
          })}
          email={p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.email
          })}
        />
      ) : null}

      <AvatarSvgrepoComsvg2Icon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "mnOverlay", "svg"],
  mnOverlay: ["mnOverlay"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "button";
  mnOverlay: typeof MnOverlay;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAvatarMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAvatarMenu__VariantsArgs;
    args?: PlasmicAvatarMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAvatarMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAvatarMenu__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAvatarMenu__ArgProps,
          internalVariantPropNames: PlasmicAvatarMenu__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAvatarMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAvatarMenu";
  } else {
    func.displayName = `PlasmicAvatarMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicAvatarMenu = Object.assign(
  // Top-level PlasmicAvatarMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    mnOverlay: makeNodeComponent("mnOverlay"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicAvatarMenu
    internalVariantProps: PlasmicAvatarMenu__VariantProps,
    internalArgProps: PlasmicAvatarMenu__ArgProps
  }
);

export default PlasmicAvatarMenu;
/* prettier-ignore-end */
