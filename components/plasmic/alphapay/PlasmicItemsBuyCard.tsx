// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4wM4qRuToRKiXKZ116596e
// Component: 6CrWunQZ8t
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_alphapay.module.css"; // plasmic-import: 4wM4qRuToRKiXKZ116596e/projectcss
import sty from "./PlasmicItemsBuyCard.module.css"; // plasmic-import: 6CrWunQZ8t/css

import ShareBoxSvgrepoComsvgIcon from "./icons/PlasmicIcon__ShareBoxSvgrepoComsvg"; // plasmic-import: nM6BQOQuo4/icon
import TimerSvgrepoComsvgIcon from "./icons/PlasmicIcon__TimerSvgrepoComsvg"; // plasmic-import: Gj0QWwynkf/icon

export type PlasmicItemsBuyCard__VariantMembers = {};

export type PlasmicItemsBuyCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicItemsBuyCard__VariantsArgs;
export const PlasmicItemsBuyCard__VariantProps = new Array<VariantPropType>();

export type PlasmicItemsBuyCard__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicItemsBuyCard__ArgsType;
export const PlasmicItemsBuyCard__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicItemsBuyCard__OverridesType = {
  root?: p.Flex<"div">;
  col?: p.Flex<"div">;
  itemDetails?: p.Flex<"div">;
  titleWrapper?: p.Flex<"div">;
  h5?: p.Flex<"h5">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  footer2?: p.Flex<"div">;
  leftTitle2?: p.Flex<"div">;
  rightContent2?: p.Flex<"div">;
  quotes?: p.Flex<"div">;
};

export interface DefaultItemsBuyCardProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

function PlasmicItemsBuyCard__RenderFunc(props: {
  variants: PlasmicItemsBuyCard__VariantsArgs;
  args: PlasmicItemsBuyCard__ArgsType;
  overrides: PlasmicItemsBuyCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"col"}
        data-plasmic-override={overrides.col}
        hasGap={true}
        className={classNames(projectcss.all, sty.col)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__lUyK)}
              displayHeight={"120px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"120px" as const}
              loading={"lazy" as const}
            />
          ),

          value: args.children
        })}

        <p.Stack
          as={"div"}
          data-plasmic-name={"itemDetails"}
          data-plasmic-override={overrides.itemDetails}
          hasGap={true}
          className={classNames(projectcss.all, sty.itemDetails)}
        >
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"titleWrapper"}
              data-plasmic-override={overrides.titleWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.titleWrapper)}
            >
              <h5
                data-plasmic-name={"h5"}
                data-plasmic-override={overrides.h5}
                className={classNames(
                  projectcss.all,
                  projectcss.h5,
                  projectcss.__wab_text,
                  sty.h5
                )}
              >
                {"Tato Super Geday"}
              </h5>

              <p.PlasmicLink
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(projectcss.all, projectcss.a, sty.link)}
                component={Link}
                platform={"nextjs"}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Enter some text",
                  value: args.slot
                })}
              </p.PlasmicLink>
            </p.Stack>
          ) : null}
        </p.Stack>

        <ShareBoxSvgrepoComsvgIcon
          className={classNames(projectcss.all, sty.svg__ag12Q)}
          role={"img"}
        />
      </p.Stack>

      <div
        data-plasmic-name={"footer2"}
        data-plasmic-override={overrides.footer2}
        className={classNames(projectcss.all, sty.footer2)}
      >
        <div
          data-plasmic-name={"leftTitle2"}
          data-plasmic-override={overrides.leftTitle2}
          className={classNames(projectcss.all, sty.leftTitle2)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rupsj
            )}
          >
            {"Price"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qKbqP
            )}
          >
            {"Price IDR"}
          </div>
        </div>

        <div
          data-plasmic-name={"rightContent2"}
          data-plasmic-override={overrides.rightContent2}
          className={classNames(projectcss.all, sty.rightContent2)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__uQozO
            )}
          >
            {"13 USD"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__uS79D
            )}
          >
            {"186.500"}
          </div>
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"quotes"}
          data-plasmic-override={overrides.quotes}
          hasGap={true}
          className={classNames(projectcss.all, sty.quotes)}
        >
          <TimerSvgrepoComsvgIcon
            className={classNames(projectcss.all, sty.svg__raagD)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__kSl4L
            )}
          >
            {"Quotes Update in 60s"}
          </div>
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "col",
    "itemDetails",
    "titleWrapper",
    "h5",
    "link",
    "footer2",
    "leftTitle2",
    "rightContent2",
    "quotes"
  ],
  col: ["col", "itemDetails", "titleWrapper", "h5", "link"],
  itemDetails: ["itemDetails", "titleWrapper", "h5", "link"],
  titleWrapper: ["titleWrapper", "h5", "link"],
  h5: ["h5"],
  link: ["link"],
  footer2: ["footer2", "leftTitle2", "rightContent2", "quotes"],
  leftTitle2: ["leftTitle2"],
  rightContent2: ["rightContent2"],
  quotes: ["quotes"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  col: "div";
  itemDetails: "div";
  titleWrapper: "div";
  h5: "h5";
  link: "a";
  footer2: "div";
  leftTitle2: "div";
  rightContent2: "div";
  quotes: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicItemsBuyCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicItemsBuyCard__VariantsArgs;
    args?: PlasmicItemsBuyCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicItemsBuyCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicItemsBuyCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicItemsBuyCard__ArgProps,
          internalVariantPropNames: PlasmicItemsBuyCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicItemsBuyCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItemsBuyCard";
  } else {
    func.displayName = `PlasmicItemsBuyCard.${nodeName}`;
  }
  return func;
}

export const PlasmicItemsBuyCard = Object.assign(
  // Top-level PlasmicItemsBuyCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    col: makeNodeComponent("col"),
    itemDetails: makeNodeComponent("itemDetails"),
    titleWrapper: makeNodeComponent("titleWrapper"),
    h5: makeNodeComponent("h5"),
    link: makeNodeComponent("link"),
    footer2: makeNodeComponent("footer2"),
    leftTitle2: makeNodeComponent("leftTitle2"),
    rightContent2: makeNodeComponent("rightContent2"),
    quotes: makeNodeComponent("quotes"),

    // Metadata about props expected for PlasmicItemsBuyCard
    internalVariantProps: PlasmicItemsBuyCard__VariantProps,
    internalArgProps: PlasmicItemsBuyCard__ArgProps
  }
);

export default PlasmicItemsBuyCard;
/* prettier-ignore-end */
