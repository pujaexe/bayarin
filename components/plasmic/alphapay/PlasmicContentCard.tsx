// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4wM4qRuToRKiXKZ116596e
// Component: a0hRfMzIla
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ItemsBuyCard from "../../ItemsBuyCard"; // plasmic-import: 6CrWunQZ8t/component
import TextInput from "../../TextInput"; // plasmic-import: ousQ4_tjfKM/component
import InfoCard from "../../InfoCard"; // plasmic-import: G7cTYvdFrJ/component

import { useScreenVariants as useScreenVariantsxEPdzIdtzvdZk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: xEPdzIDTZVDZk/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_alphapay.module.css"; // plasmic-import: 4wM4qRuToRKiXKZ116596e/projectcss
import sty from "./PlasmicContentCard.module.css"; // plasmic-import: a0hRfMzIla/css

import MinusSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__MinusSvgrepoCom1Svg"; // plasmic-import: c-HtYxoFJO/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: Kc9rgBWbPop/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: E36QpBAKQmv/icon
import PlusSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__PlusSvgrepoCom2Svg"; // plasmic-import: Z6N7VeUr2s/icon

export type PlasmicContentCard__VariantMembers = {};

export type PlasmicContentCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicContentCard__VariantsArgs;
export const PlasmicContentCard__VariantProps = new Array<VariantPropType>();

export type PlasmicContentCard__ArgsType = {};
type ArgPropType = keyof PlasmicContentCard__ArgsType;
export const PlasmicContentCard__ArgProps = new Array<ArgPropType>();

export type PlasmicContentCard__OverridesType = {
  root?: p.Flex<"div">;
  h4?: p.Flex<"h4">;
  itemsBuyCard?: p.Flex<typeof ItemsBuyCard>;
  img?: p.Flex<typeof p.PlasmicImg>;
  inputJumlahBeli?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  buttonMinus?: p.Flex<"button">;
  buttonPlus?: p.Flex<"button">;
  form?: p.Flex<"form">;
  inputJumlahBeli2?: p.Flex<"div">;
  infoCard?: p.Flex<typeof InfoCard>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultContentCardProps {
  className?: string;
}

function PlasmicContentCard__RenderFunc(props: {
  variants: PlasmicContentCard__VariantsArgs;
  args: PlasmicContentCard__ArgsType;
  overrides: PlasmicContentCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxEPdzIdtzvdZk()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <h4
        data-plasmic-name={"h4"}
        data-plasmic-override={overrides.h4}
        className={classNames(
          projectcss.all,
          projectcss.h4,
          projectcss.__wab_text,
          sty.h4
        )}
      >
        {"Ringkasan Pembelian"}
      </h4>

      <ItemsBuyCard
        data-plasmic-name={"itemsBuyCard"}
        data-plasmic-override={overrides.itemsBuyCard}
        className={classNames("__wab_instance", sty.itemsBuyCard)}
        slot={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__enchq
            )}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly")
              ? "https://buy.getkupo..."
              : "https://buy.getkupon.io/damantraz"}
          </div>
        }
      >
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? ("72px" as const)
              : ("90px" as const)
          }
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? ("72px" as const)
              : ("90px" as const)
          }
          loading={"lazy" as const}
          src={{
            src: "/plasmic/alphapay/images/image.png",
            fullWidth: 1080,
            fullHeight: 1350,
            aspectRatio: undefined
          }}
        />
      </ItemsBuyCard>

      <p.Stack
        as={"div"}
        data-plasmic-name={"inputJumlahBeli"}
        data-plasmic-override={overrides.inputJumlahBeli}
        hasGap={true}
        className={classNames(projectcss.all, sty.inputJumlahBeli)}
      >
        <label
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.label__okxEd
          )}
        >
          {"Jumlah Beli"}
        </label>

        <p.Stack
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {true ? (
            <button
              data-plasmic-name={"buttonMinus"}
              data-plasmic-override={overrides.buttonMinus}
              className={classNames(
                projectcss.all,
                projectcss.button,
                sty.buttonMinus,
                "" as const
              )}
              onClick={"{dec}" as const}
            >
              <MinusSvgrepoCom1SvgIcon
                className={classNames(projectcss.all, sty.svg__n5Ohy)}
                role={"img"}
              />
            </button>
          ) : null}

          <TextInput
            className={classNames("__wab_instance", sty.textInput__yU7Wm)}
            color={"dark" as const}
            name={"quantity" as const}
          />

          {true ? (
            <button
              data-plasmic-name={"buttonPlus"}
              data-plasmic-override={overrides.buttonPlus}
              className={classNames(
                projectcss.all,
                projectcss.button,
                sty.buttonPlus
              )}
              onClick={"{inc}" as const}
            >
              <PlusSvgrepoCom2SvgIcon
                className={classNames(projectcss.all, sty.svg__n8Oht)}
                role={"img"}
              />
            </button>
          ) : null}
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={"form"}
        data-plasmic-name={"form"}
        data-plasmic-override={overrides.form}
        hasGap={true}
        className={classNames(projectcss.all, sty.form)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"inputJumlahBeli2"}
          data-plasmic-override={overrides.inputJumlahBeli2}
          hasGap={true}
          className={classNames(projectcss.all, sty.inputJumlahBeli2)}
        >
          <label
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.label___8NIqI
            )}
          >
            {"Alamat wallet penerima"}
          </label>

          <input
            className={classNames(
              projectcss.all,
              projectcss.input,
              sty.textInput__ixICg
            )}
            placeholder={"Ex : 0X1....90909" as const}
            size={1 as const}
            type={"text" as const}
            value={"" as const}
          />
        </p.Stack>

        <InfoCard
          data-plasmic-name={"infoCard"}
          data-plasmic-override={overrides.infoCard}
          className={classNames("__wab_instance", sty.infoCard)}
        />
      </p.Stack>

      <p.PlasmicLink
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(projectcss.all, projectcss.a, sty.link)}
        component={Link}
        href={`/mailsign-up`}
        platform={"nextjs"}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lexNh
          )}
        >
          {"Continue"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___2GrFx
          )}
        >
          {" 187.000 IDR"}
        </div>
      </p.PlasmicLink>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h4",
    "itemsBuyCard",
    "img",
    "inputJumlahBeli",
    "freeBox",
    "buttonMinus",
    "buttonPlus",
    "form",
    "inputJumlahBeli2",
    "infoCard",
    "link"
  ],
  h4: ["h4"],
  itemsBuyCard: ["itemsBuyCard", "img"],
  img: ["img"],
  inputJumlahBeli: ["inputJumlahBeli", "freeBox", "buttonMinus", "buttonPlus"],
  freeBox: ["freeBox", "buttonMinus", "buttonPlus"],
  buttonMinus: ["buttonMinus"],
  buttonPlus: ["buttonPlus"],
  form: ["form", "inputJumlahBeli2", "infoCard"],
  inputJumlahBeli2: ["inputJumlahBeli2"],
  infoCard: ["infoCard"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h4: "h4";
  itemsBuyCard: typeof ItemsBuyCard;
  img: typeof p.PlasmicImg;
  inputJumlahBeli: "div";
  freeBox: "div";
  buttonMinus: "button";
  buttonPlus: "button";
  form: "form";
  inputJumlahBeli2: "div";
  infoCard: typeof InfoCard;
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContentCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContentCard__VariantsArgs;
    args?: PlasmicContentCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContentCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicContentCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicContentCard__ArgProps,
          internalVariantPropNames: PlasmicContentCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicContentCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContentCard";
  } else {
    func.displayName = `PlasmicContentCard.${nodeName}`;
  }
  return func;
}

export const PlasmicContentCard = Object.assign(
  // Top-level PlasmicContentCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    itemsBuyCard: makeNodeComponent("itemsBuyCard"),
    img: makeNodeComponent("img"),
    inputJumlahBeli: makeNodeComponent("inputJumlahBeli"),
    freeBox: makeNodeComponent("freeBox"),
    buttonMinus: makeNodeComponent("buttonMinus"),
    buttonPlus: makeNodeComponent("buttonPlus"),
    form: makeNodeComponent("form"),
    inputJumlahBeli2: makeNodeComponent("inputJumlahBeli2"),
    infoCard: makeNodeComponent("infoCard"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicContentCard
    internalVariantProps: PlasmicContentCard__VariantProps,
    internalArgProps: PlasmicContentCard__ArgProps
  }
);

export default PlasmicContentCard;
/* prettier-ignore-end */
