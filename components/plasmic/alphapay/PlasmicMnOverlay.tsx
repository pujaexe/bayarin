// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4wM4qRuToRKiXKZ116596e
// Component: gU_V28Nrd
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_alphapay.module.css"; // plasmic-import: 4wM4qRuToRKiXKZ116596e/projectcss
import sty from "./PlasmicMnOverlay.module.css"; // plasmic-import: gU_V28Nrd/css

export type PlasmicMnOverlay__VariantMembers = {};

export type PlasmicMnOverlay__VariantsArgs = {};
type VariantPropType = keyof PlasmicMnOverlay__VariantsArgs;
export const PlasmicMnOverlay__VariantProps = new Array<VariantPropType>();

export type PlasmicMnOverlay__ArgsType = {
  email?: React.ReactNode;
  caption?: React.ReactNode;
};

type ArgPropType = keyof PlasmicMnOverlay__ArgsType;
export const PlasmicMnOverlay__ArgProps = new Array<ArgPropType>(
  "email",
  "caption"
);

export type PlasmicMnOverlay__OverridesType = {
  root?: p.Flex<"div">;
  emailAddress?: p.Flex<"div">;
  item?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultMnOverlayProps {
  email?: React.ReactNode;
  caption?: React.ReactNode;
  className?: string;
}

function PlasmicMnOverlay__RenderFunc(props: {
  variants: PlasmicMnOverlay__VariantsArgs;
  args: PlasmicMnOverlay__ArgsType;
  overrides: PlasmicMnOverlay__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"emailAddress"}
        data-plasmic-override={overrides.emailAddress}
        className={classNames(projectcss.all, sty.emailAddress)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "user@mail.com",
          value: args.email
        })}
      </div>

      <p.PlasmicLink
        data-plasmic-name={"item"}
        data-plasmic-override={overrides.item}
        className={classNames(projectcss.all, projectcss.a, sty.item)}
        component={Link}
        platform={"nextjs"}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Logout",
          value: args.caption
        })}
      </p.PlasmicLink>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "emailAddress", "item"],
  emailAddress: ["emailAddress"],
  item: ["item"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  emailAddress: "div";
  item: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMnOverlay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMnOverlay__VariantsArgs;
    args?: PlasmicMnOverlay__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMnOverlay__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMnOverlay__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMnOverlay__ArgProps,
          internalVariantPropNames: PlasmicMnOverlay__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicMnOverlay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMnOverlay";
  } else {
    func.displayName = `PlasmicMnOverlay.${nodeName}`;
  }
  return func;
}

export const PlasmicMnOverlay = Object.assign(
  // Top-level PlasmicMnOverlay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    emailAddress: makeNodeComponent("emailAddress"),
    item: makeNodeComponent("item"),

    // Metadata about props expected for PlasmicMnOverlay
    internalVariantProps: PlasmicMnOverlay__VariantProps,
    internalArgProps: PlasmicMnOverlay__ArgProps
  }
);

export default PlasmicMnOverlay;
/* prettier-ignore-end */
