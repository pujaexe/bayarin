// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4wM4qRuToRKiXKZ116596e
// Component: zllBn591yCV
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: panrLIu3Rq/component

import { useScreenVariants as useScreenVariantsxEPdzIdtzvdZk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: xEPdzIDTZVDZk/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_alphapay.module.css"; // plasmic-import: 4wM4qRuToRKiXKZ116596e/projectcss
import sty from "./PlasmicOtPmail.module.css"; // plasmic-import: zllBn591yCV/css

import BackSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__BackSvgrepoCom1Svg"; // plasmic-import: ZryRL3ob7f/icon

export type PlasmicOtPmail__VariantMembers = {};

export type PlasmicOtPmail__VariantsArgs = {};
type VariantPropType = keyof PlasmicOtPmail__VariantsArgs;
export const PlasmicOtPmail__VariantProps = new Array<VariantPropType>();

export type PlasmicOtPmail__ArgsType = {};
type ArgPropType = keyof PlasmicOtPmail__ArgsType;
export const PlasmicOtPmail__ArgProps = new Array<ArgPropType>();

export type PlasmicOtPmail__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  section?: p.Flex<"section">;
  contentWrapper?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  h4?: p.Flex<"h4">;
  h6?: p.Flex<"h6">;
  form?: p.Flex<"form">;
  inputJumlahBeli?: p.Flex<"div">;
  span?: p.Flex<"span">;
  text?: p.Flex<"div">;
};

export interface DefaultOtPmailProps {}

function PlasmicOtPmail__RenderFunc(props: {
  variants: PlasmicOtPmail__VariantsArgs;
  args: PlasmicOtPmail__ArgsType;
  overrides: PlasmicOtPmail__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxEPdzIdtzvdZk()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"contentWrapper"}
              data-plasmic-override={overrides.contentWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.contentWrapper)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xr3HO)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__w1T6Y)}
                  >
                    {true ? (
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link___6Bogn
                        )}
                        component={Link}
                        href={`/mailsign-up`}
                        platform={"nextjs"}
                      >
                        <BackSvgrepoCom1SvgIcon
                          data-plasmic-name={"svg"}
                          data-plasmic-override={overrides.svg}
                          className={classNames(projectcss.all, sty.svg)}
                          role={"img"}
                        />
                      </p.PlasmicLink>
                    ) : null}

                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      {"OTP"}
                    </h4>
                  </div>
                ) : null}

                <h6
                  data-plasmic-name={"h6"}
                  data-plasmic-override={overrides.h6}
                  className={classNames(
                    projectcss.all,
                    projectcss.h6,
                    projectcss.__wab_text,
                    sty.h6
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "Masukan OTP Code yang telah kami kirimkan ke alamat email "
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#358BFF" }}
                    >
                      {"user@mail.com"}
                    </span>
                  </React.Fragment>
                </h6>

                <p.Stack
                  as={"form"}
                  data-plasmic-name={"form"}
                  data-plasmic-override={overrides.form}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.form)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"inputJumlahBeli"}
                    data-plasmic-override={overrides.inputJumlahBeli}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.inputJumlahBeli)}
                  >
                    <input
                      className={classNames(
                        projectcss.all,
                        projectcss.input,
                        sty.textInput___3Q23Q
                      )}
                      placeholder={"0" as const}
                      size={1 as const}
                      type={"text" as const}
                      value={"" as const}
                    />

                    <input
                      className={classNames(
                        projectcss.all,
                        projectcss.input,
                        sty.textInput__umOmX
                      )}
                      placeholder={"0" as const}
                      size={1 as const}
                      type={"text" as const}
                      value={"" as const}
                    />

                    <input
                      className={classNames(
                        projectcss.all,
                        projectcss.input,
                        sty.textInput__tWz4Y
                      )}
                      placeholder={"0" as const}
                      size={1 as const}
                      type={"text" as const}
                      value={"" as const}
                    />

                    <input
                      className={classNames(
                        projectcss.all,
                        projectcss.input,
                        sty.textInput__swLo8
                      )}
                      placeholder={"0" as const}
                      size={1 as const}
                      type={"text" as const}
                      value={"" as const}
                    />

                    <input
                      className={classNames(
                        projectcss.all,
                        projectcss.input,
                        sty.textInput__jYqLo
                      )}
                      placeholder={"0" as const}
                      size={1 as const}
                      type={"text" as const}
                      value={"" as const}
                    />

                    <input
                      className={classNames(
                        projectcss.all,
                        projectcss.input,
                        sty.textInput__eAjdi
                      )}
                      placeholder={"0" as const}
                      size={1 as const}
                      type={"text" as const}
                      value={"" as const}
                    />
                  </p.Stack>

                  <span
                    data-plasmic-name={"span"}
                    data-plasmic-override={overrides.span}
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      sty.span
                    )}
                  >
                    {"Belum menerima OTP Code? kirim ulang (60s)"}
                  </span>
                </p.Stack>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__x5OdP
                  )}
                  component={Link}
                  href={`/manual-transfer`}
                  platform={"nextjs"}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Continue"}
                  </div>
                </p.PlasmicLink>
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "section",
    "contentWrapper",
    "svg",
    "h4",
    "h6",
    "form",
    "inputJumlahBeli",
    "span",
    "text"
  ],
  navbar: ["navbar"],
  section: [
    "section",
    "contentWrapper",
    "svg",
    "h4",
    "h6",
    "form",
    "inputJumlahBeli",
    "span",
    "text"
  ],
  contentWrapper: [
    "contentWrapper",
    "svg",
    "h4",
    "h6",
    "form",
    "inputJumlahBeli",
    "span",
    "text"
  ],
  svg: ["svg"],
  h4: ["h4"],
  h6: ["h6"],
  form: ["form", "inputJumlahBeli", "span"],
  inputJumlahBeli: ["inputJumlahBeli"],
  span: ["span"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  section: "section";
  contentWrapper: "div";
  svg: "svg";
  h4: "h4";
  h6: "h6";
  form: "form";
  inputJumlahBeli: "div";
  span: "span";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOtPmail__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOtPmail__VariantsArgs;
    args?: PlasmicOtPmail__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOtPmail__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOtPmail__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicOtPmail__ArgProps,
          internalVariantPropNames: PlasmicOtPmail__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicOtPmail__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOtPmail";
  } else {
    func.displayName = `PlasmicOtPmail.${nodeName}`;
  }
  return func;
}

export const PlasmicOtPmail = Object.assign(
  // Top-level PlasmicOtPmail renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    section: makeNodeComponent("section"),
    contentWrapper: makeNodeComponent("contentWrapper"),
    svg: makeNodeComponent("svg"),
    h4: makeNodeComponent("h4"),
    h6: makeNodeComponent("h6"),
    form: makeNodeComponent("form"),
    inputJumlahBeli: makeNodeComponent("inputJumlahBeli"),
    span: makeNodeComponent("span"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicOtPmail
    internalVariantProps: PlasmicOtPmail__VariantProps,
    internalArgProps: PlasmicOtPmail__ArgProps
  }
);

export default PlasmicOtPmail;
/* prettier-ignore-end */
